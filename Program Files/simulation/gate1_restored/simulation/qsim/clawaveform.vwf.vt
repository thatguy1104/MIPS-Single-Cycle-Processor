// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2019 20:13:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          clalogic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clalogic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C0;
reg [3:0] G;
reg [3:0] P;
// wires                                               
wire C1;
wire C2;
wire C3;
wire C4;

// assign statements (if any)                          
clalogic i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.G(G),
	.P(P)
);
initial 
begin 
#10000000 $stop;
end 
// G[ 3 ]
initial
begin
	G[3] = 1'b0;
end 
// G[ 2 ]
initial
begin
	G[2] = 1'b0;
end 
// G[ 1 ]
initial
begin
	G[1] = 1'b0;
end 
// G[ 0 ]
initial
begin
	G[0] = 1'b1;
	G[0] = #1000000 1'b0;
end 
// P[ 3 ]
initial
begin
	P[3] = 1'b0;
end 
// P[ 2 ]
initial
begin
	P[2] = 1'b0;
end 
// P[ 1 ]
initial
begin
	P[1] = 1'b0;
end 
// P[ 0 ]
initial
begin
	P[0] = 1'b1;
	P[0] = #1000000 1'b0;
end 

// C0
initial
begin
	C0 = 1'b1;
	C0 = #1000000 1'b0;
end 
endmodule

